<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wh0am11&#39;s Blog</title>
  
  <subtitle>xxx</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-18T06:29:58.991Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wh0am11</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker-compose build</title>
    <link href="http://yoursite.com/2019/09/16/docker-compose/"/>
    <id>http://yoursite.com/2019/09/16/docker-compose/</id>
    <published>2019-09-16T19:00:00.000Z</published>
    <updated>2019-09-18T06:29:58.991Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker-compose-build"><a href="#docker-compose-build" class="headerlink" title="docker-compose build"></a>docker-compose build</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: build [options] [--build-arg key=val...] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --compress              使用gzip压缩构建上下文</span><br><span class="line">    --force-rm              始终移除中间容器</span><br><span class="line">    --no-cache              Do not use cache when building the image.</span><br><span class="line">    --pull                  Always attempt to pull a newer version of the image.</span><br><span class="line">    -m, --memory MEM        Sets memory <span class="built_in">limit</span> <span class="keyword">for</span> the build container.</span><br><span class="line">    --build-arg key=val     Set build-time variables <span class="keyword">for</span> services.</span><br><span class="line">    --parallel              并行构建镜像</span><br></pre></td></tr></table></figure><p>services被构建一次然后默认标记为 <code>project_service</code>，例如 <code>composetest_db</code>。如果Compose文件指定镜像名称，镜像被标记为此名称。事先替换任何变量， 详情见 <a href="https://docs.docker.com/compose/compose-file/#variable-substitution" target="_blank" rel="noopener">variable substitution</a></p><p>如果更改service’s Dockerfile或者构建目录的上下文，执行<code>docker-compose build</code>重构</p><h3 id="docker-compose-bundle"><a href="#docker-compose-bundle" class="headerlink" title="docker-compose bundle"></a>docker-compose bundle</h3><h3 id="docker-compose-config"><a href="#docker-compose-config" class="headerlink" title="docker-compose config"></a>docker-compose config</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: config [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --resolve-image-digests  Pin image tags to digests.</span><br><span class="line">    --no-interpolate         Don<span class="string">'t interpolate environment variables.</span></span><br><span class="line"><span class="string">    -q, --quiet              Only validate the configuration, don'</span>t <span class="built_in">print</span> anything.</span><br><span class="line">    --services               Print the service names, one per line.</span><br><span class="line">    --volumes                Print the volume names, one per line.</span><br><span class="line">    --<span class="built_in">hash</span>=<span class="string">"*"</span>               Print the service config <span class="built_in">hash</span>, one per line.</span><br><span class="line">                             Set <span class="string">"service1,service2"</span> <span class="keyword">for</span> a list of specified services</span><br><span class="line">                             or use the wildcard symbol to display all services.</span><br></pre></td></tr></table></figure><p>验证并查看Compose file</p><h3 id="docker-compose-create"><a href="#docker-compose-create" class="headerlink" title="docker-compose create"></a>docker-compose create</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Creates containers <span class="keyword">for</span> a service.</span><br><span class="line">This <span class="built_in">command</span> is deprecated. Use the `up` <span class="built_in">command</span> with `--no-start` instead.</span><br></pre></td></tr></table></figure><h3 id="docker-compose-down"><a href="#docker-compose-down" class="headerlink" title="docker-compose down"></a>docker-compose down</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: down [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --rmi <span class="built_in">type</span>              Remove images. Type must be one of:</span><br><span class="line">                              <span class="string">'all'</span>: Remove all images used by any service.</span><br><span class="line">                              <span class="string">'local'</span>: Remove only images that don<span class="string">'t have a</span></span><br><span class="line"><span class="string">                              custom tag set by the `image` field.</span></span><br><span class="line"><span class="string">    -v, --volumes           Remove named volumes declared in the `volumes`</span></span><br><span class="line"><span class="string">                            section of the Compose file and anonymous volumes</span></span><br><span class="line"><span class="string">                            attached to containers.</span></span><br><span class="line"><span class="string">    --remove-orphans        Remove containers for services not defined in the</span></span><br><span class="line"><span class="string">                            Compose file</span></span><br><span class="line"><span class="string">    -t, --timeout TIMEOUT   Specify a shutdown timeout in seconds.</span></span><br><span class="line"><span class="string">                            (default: 10)</span></span><br></pre></td></tr></table></figure><p>停止容器并删除由 <code>up</code> 创建的容器，网络，卷，镜像</p><p>默认情况下，唯一被删除的是：</p><ul><li>Compose file定义的service生成的容器</li><li>Compose file中 <code>networks</code> 部分定义的网络</li><li>默认网络，如果已经被使用</li></ul><p>定义为 <code>external</code> 的Networks 和 volumes永远不会被删除 </p><h3 id="docker-compose-events"><a href="#docker-compose-events" class="headerlink" title="docker-compose events"></a>docker-compose events</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: events [options] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --json      Output events as a stream of json objects</span><br></pre></td></tr></table></figure><p>流式处理项目中每个容器的事件</p><h3 id="docker-compose-exec"><a href="#docker-compose-exec" class="headerlink" title="docker-compose exec"></a>docker-compose exec</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: <span class="built_in">exec</span> [options] [-e KEY=VAL...] SERVICE COMMAND [ARGS...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -d, --detach      Detached mode: Run <span class="built_in">command</span> <span class="keyword">in</span> the background.</span><br><span class="line">    --privileged      Give extended privileges to the process.</span><br><span class="line">    -u, --user USER   Run the <span class="built_in">command</span> as this user.</span><br><span class="line">    -T                Disable pseudo-tty allocation. By default `docker-compose <span class="built_in">exec</span>`</span><br><span class="line">                      allocates a TTY.</span><br><span class="line">    --index=index     index of the container <span class="keyword">if</span> there are multiple</span><br><span class="line">                      instances of a service [default: 1]</span><br><span class="line">    -e, --env KEY=VAL Set environment variables (can be used multiple <span class="built_in">times</span>,</span><br><span class="line">                      not supported <span class="keyword">in</span> API &lt; 1.25)</span><br><span class="line">    -w, --workdir DIR Path to workdir directory <span class="keyword">for</span> this <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><p>相当于docker exec，使用此子命令，您可以在服务中运行任意命令。 默认情况下，命令分配TTY，因此您可以使用诸如<code>docker-compose exec web sh</code>之类的命令来获取交互式提示</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml <span class="built_in">exec</span> --index=2 webapp /bin/sh</span><br></pre></td></tr></table></figure><h3 id="docker-compose-kill"><a href="#docker-compose-kill" class="headerlink" title="docker-compose kill"></a>docker-compose kill</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: <span class="built_in">kill</span> [options] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -s SIGNAL         SIGNAL to send to the container.</span><br><span class="line">                      Default signal is SIGKILL.</span><br></pre></td></tr></table></figure><p>通过发送<code>SIGKILL</code>信号强制停止正在运行的容器，发送的信息是可选的，例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose <span class="built_in">kill</span> -s SIGINT</span><br></pre></td></tr></table></figure><h3 id="docker-compose-logs"><a href="#docker-compose-logs" class="headerlink" title="docker-compose logs"></a>docker-compose logs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: logs [options] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --no-color          Produce monochrome output.</span><br><span class="line">    -f, --follow        Follow <span class="built_in">log</span> output.</span><br><span class="line">    -t, --timestamps    Show timestamps.</span><br><span class="line">    --tail=<span class="string">"all"</span>        Number of lines to show from the end of the logs</span><br><span class="line">                        <span class="keyword">for</span> each container.</span><br></pre></td></tr></table></figure><p>通过service显示日志输出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose -f docker-compose.yml logs -f webapp</span></span><br><span class="line">Attaching to composetest_webapp_2, composetest_webapp_1</span><br><span class="line">webapp_1   | 172.18.0.4 - - [17/Sep/2019:08:02:34 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></span><br><span class="line">webapp_1   | 172.18.0.4 - - [17/Sep/2019:08:03:07 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></span><br><span class="line">webapp_1   | 172.18.0.4 - - [17/Sep/2019:08:03:21 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></span><br><span class="line">webapp_2   | 172.18.0.4 - - [17/Sep/2019:08:03:51 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></span><br></pre></td></tr></table></figure><p>也可以通过容器显示，但是只能查看单个容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker logs -f 25fea395cdae</span></span><br><span class="line">172.18.0.4 - - [17/Sep/2019:08:02:34 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></span><br><span class="line">172.18.0.4 - - [17/Sep/2019:08:03:07 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></span><br><span class="line">172.18.0.4 - - [17/Sep/2019:08:03:21 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></span><br><span class="line">172.18.0.4 - - [17/Sep/2019:08:05:43 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 612 <span class="string">"-"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose-pause"><a href="#docker-compose-pause" class="headerlink" title="docker-compose pause"></a>docker-compose pause</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: pause [SERVICE...]</span><br></pre></td></tr></table></figure><p>暂停正在service中正在运行的容器，也可以通过 <code>docker-compose unpause</code> 取消暂停</p><h3 id="docker-compose-port"><a href="#docker-compose-port" class="headerlink" title="docker-compose port"></a>docker-compose port</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: port [options] SERVICE PRIVATE_PORT</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --protocol=proto  tcp or udp [default: tcp]</span><br><span class="line">    --index=index     index of the container <span class="keyword">if</span> there are multiple</span><br><span class="line">                      instances of a service [default: 1]</span><br></pre></td></tr></table></figure><p>若容器端口已映射公共端口，可通过<code>docker-compose port service PRIVATE_PORT</code>打印出所以映射的公共端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose port web 5000</span></span><br><span class="line">0.0.0.0:5000</span><br></pre></td></tr></table></figure><h3 id="docker-compose-ps"><a href="#docker-compose-ps" class="headerlink" title="docker-compose ps"></a>docker-compose ps</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: ps [options] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -q, --quiet          Only display IDs</span><br><span class="line">    --services           Display services</span><br><span class="line">    --filter KEY=VAL     Filter services by a property</span><br></pre></td></tr></table></figure><p>列出项目中当前的所有容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose -f docker-compose.yml ps</span></span><br><span class="line">       Name                      Command               State           Ports         </span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">composetest_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp              </span><br><span class="line">composetest_web_1     flask run                        Up      0.0.0.0:5000-&gt;5000/tcp</span><br></pre></td></tr></table></figure><h3 id="docker-compose-pull"><a href="#docker-compose-pull" class="headerlink" title="docker-compose pull"></a>docker-compose pull</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: pull [options] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --ignore-pull-failures  Pull what it can and ignores images with pull failures.</span><br><span class="line">    --parallel              Deprecated, pull multiple images <span class="keyword">in</span> parallel (enabled by default).</span><br><span class="line">    --no-parallel           Disable parallel pulling.</span><br><span class="line">    -q, --quiet             Pull without printing progress information</span><br><span class="line">    --include-deps          Also pull services declared as dependencies</span><br></pre></td></tr></table></figure><p>拉取 <code>docker-compose.yml</code> 或者 <code>docker-stack.yml</code> 中定义的service相关的镜像，但是不启动基于这些镜像的容器</p><p>例如，假设你有来自<code>Quickstart: Compose and Rails</code>(<a href="https://docs.docker.com/compose/rails/" target="_blank" rel="noopener">https://docs.docker.com/compose/rails/</a>) 的 <code>docker-compose.yml</code> 文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rails</span> <span class="string">s</span> <span class="bullet">-p</span> <span class="number">3000</span> <span class="bullet">-b</span> <span class="string">'0.0.0.0'</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">.:/myapp</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"3000:3000"</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br></pre></td></tr></table></figure><p>如果你在定义了service的 <code>docker-compose.yml</code> 所在的目录中执行 <code>docker-compose pull ServiceName</code> ，Docker会拉取相关镜像。例如，拉取例子中 <code>db</code> service相关的 <code>postgres</code> 镜像，你需要执行 <code>docker-compose pull web</code> 。若拉取所有service的镜像，执行 <code>docker-compose pull</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose pull db</span><br><span class="line">Pulling db (postgres:latest)...</span><br><span class="line">latest: Pulling from library/postgres</span><br><span class="line">cd0a524342ef: Pull complete</span><br><span class="line">9c784d04dcb0: Pull complete</span><br><span class="line">d99dddf7e662: Pull complete</span><br><span class="line">e5bff71e3ce6: Pull complete</span><br><span class="line">cb3e0a865488: Pull complete</span><br><span class="line">31295d654cd5: Pull complete</span><br><span class="line">fc930a4e09f5: Pull complete</span><br><span class="line">8650cce8ef01: Pull complete</span><br><span class="line">61949acd8e52: Pull complete</span><br><span class="line">527a203588c0: Pull complete</span><br><span class="line">26dec14ac775: Pull complete</span><br><span class="line">0efc0ed5a9e5: Pull complete</span><br><span class="line">40cd26695b38: Pull complete</span><br><span class="line">Digest: sha256:fd6c0e2a9d053bebb294bb13765b3e01be7817bf77b01d58c2377ff27a4a46dc</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> postgres:latest</span><br></pre></td></tr></table></figure><h3 id="docker-compose-push"><a href="#docker-compose-push" class="headerlink" title="docker-compose push"></a>docker-compose push</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: push [options] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --ignore-push-failures  Push what it can and ignores images with push failures.</span><br></pre></td></tr></table></figure><p>上传service的镜像到它们各自的 <code>registry/repository</code></p><ul><li>你正在上传你已在本地构建好的镜像</li><li>你拥有镜像仓库的构建密钥，即你拥有镜像仓库的权限</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  service1:</span><br><span class="line">    build: .</span><br><span class="line">    image: localhost:5000/yourimage  <span class="comment"># goes to local registry</span></span><br><span class="line"></span><br><span class="line">  service2:</span><br><span class="line">    build: .</span><br><span class="line">    image: youruser/yourimage  <span class="comment"># goes to youruser DockerHub registry</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose-restart"><a href="#docker-compose-restart" class="headerlink" title="docker-compose restart"></a>docker-compose restart</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: restart [options] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -t, --timeout TIMEOUT      Specify a shutdown timeout <span class="keyword">in</span> seconds.</span><br><span class="line">                             (default: 10)</span><br></pre></td></tr></table></figure><p>重启所有停止和正在运行的service</p><p>如果你更改了 <code>docker-compose.yml</code> 配置，执行此命令不会让这些更改生效</p><p>例如，更改环境变量（添加于在容器构建之后，但是在容器命令执行之前）在重启之后不会更新</p><h3 id="docker-compose-rm"><a href="#docker-compose-rm" class="headerlink" title="docker-compose rm"></a>docker-compose rm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: rm [options] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -f, --force   Don<span class="string">'t ask to confirm removal</span></span><br><span class="line"><span class="string">    -s, --stop    Stop the containers, if required, before removing</span></span><br><span class="line"><span class="string">    -v            Remove any anonymous volumes attached to containers</span></span><br></pre></td></tr></table></figure><p>移除已停止的容器</p><p>默认情况下，附属于容器的匿名卷不会被移除，你可以通过 <code>-v</code> 对其进行覆盖。使用 <code>docker volume ls</code> 列出所有卷</p><p>当容器被移除后，任何不在卷中的数据会丢失</p><p>在无选项的情况下执行命令也能移除<code>docker-compose up</code> 和 <code>docker-compose run</code> 创建的一次性容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose rm</span><br><span class="line">Going to remove djangoquickstart_web_run_1</span><br><span class="line">Are you sure? [yN] y</span><br><span class="line">Removing djangoquickstart_web_run_1 ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose-run"><a href="#docker-compose-run" class="headerlink" title="docker-compose run"></a>docker-compose run</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    run [options] [-v VOLUME...] [-p PORT...] [-e KEY=VAL...] [-l KEY=VALUE...]</span><br><span class="line">        SERVICE [COMMAND] [ARGS...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -d, --detach          Detached mode: Run container <span class="keyword">in</span> the background, <span class="built_in">print</span></span><br><span class="line">                          new container name.</span><br><span class="line">    --name NAME           Assign a name to the container</span><br><span class="line">    --entrypoint CMD      Override the entrypoint of the image.</span><br><span class="line">    -e KEY=VAL            Set an environment variable (can be used multiple <span class="built_in">times</span>)</span><br><span class="line">    -l, --label KEY=VAL   Add or override a label (can be used multiple <span class="built_in">times</span>)</span><br><span class="line">    -u, --user=<span class="string">""</span>         Run as specified username or uid</span><br><span class="line">    --no-deps             Don<span class="string">'t start linked services.</span></span><br><span class="line"><span class="string">    --rm                  Remove container after run. Ignored in detached mode.</span></span><br><span class="line"><span class="string">    -p, --publish=[]      Publish a container'</span>s port(s) to the host</span><br><span class="line">    --service-ports       Run <span class="built_in">command</span> with the service<span class="string">'s ports enabled and mapped</span></span><br><span class="line"><span class="string">                          to the host.</span></span><br><span class="line"><span class="string">    --use-aliases         Use the service'</span>s network aliases <span class="keyword">in</span> the network(s) the</span><br><span class="line">                          container connects to.</span><br><span class="line">    -v, --volume=[]       Bind mount a volume (default [])</span><br><span class="line">    -T                    Disable pseudo-tty allocation. By default `docker-compose run`</span><br><span class="line">                          allocates a TTY.</span><br><span class="line">    -w, --workdir=<span class="string">""</span>      Working directory inside the container</span><br></pre></td></tr></table></figure><p>对service运行一次性命令，例如：以下命令启动 <code>web</code> service并运行 <code>bash</code>作为其命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose run web bash</span><br></pre></td></tr></table></figure><p>你使用的命令配合 <code>run</code> 启动一个配置被service定义的新的容器，包括卷，链接和其他细节，然而，他们有两个重要的不同点</p><p>第一，通过 <code>run</code> 传递的命令覆盖了service配置中定义的命令。例如，如果 <code>web</code> service 是以 <code>bash</code> 启动，然后执行 <code>docker-compose run web python app.py</code> 会以 <code>python app.py</code> 将其覆盖</p><p>第二个不同之处在于 <code>docker-compose run</code> 命令不会创建任何service配置定义的端口， 这可以防止与已打开的端口发生端口冲突。如果你想创建service的端口并映射到主机，指定 <code>--service-ports</code> 标记：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose run --service-ports web python manage.py shell</span><br></pre></td></tr></table></figure><p>或者，可以指定 <code>--publish</code> 或者 <code>or</code> 选项手动映射端口,就像使用 <code>docker run</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose run --publish 8080:80 -p 2022:22 -p 127.0.0.1:2021:21 web python manage.py shell</span><br></pre></td></tr></table></figure><h3 id="docker-compose-scale"><a href="#docker-compose-scale" class="headerlink" title="docker-compose scale"></a>docker-compose scale</h3><blockquote><p>注意：此命令已弃用，使用 <code>up</code> 命令加上 <code>--scale</code> 标记代替。注意使用 <code>up</code> 命令加上 <code>--scale</code> 标记与 <code>scale</code> 命令有一些细微的差别，因为它包含了up命令的行为</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: scale [options] [SERVICE=NUM...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -t, --timeout TIMEOUT      Specify a shutdown timeout <span class="keyword">in</span> seconds.</span><br><span class="line">                             (default: 10)</span><br></pre></td></tr></table></figure><p>设置service运行的容器数量</p><p>数字以 <code>service=num</code> 的形式指定为参数，例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose scale web=2 worker=3</span><br></pre></td></tr></table></figure><h3 id="docker-compose-start"><a href="#docker-compose-start" class="headerlink" title="docker-compose start"></a>docker-compose start</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: start [SERVICE...]</span><br></pre></td></tr></table></figure><p>启动service中的容器</p><h3 id="docker-compose-stop"><a href="#docker-compose-stop" class="headerlink" title="docker-compose stop"></a>docker-compose stop</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: stop [options] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -t, --timeout TIMEOUT      Specify a shutdown timeout <span class="keyword">in</span> seconds.</span><br><span class="line">                             (default: 10)</span><br></pre></td></tr></table></figure><h3 id="docker-compose-top"><a href="#docker-compose-top" class="headerlink" title="docker-compose top"></a>docker-compose top</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: top [SERVICE...]</span><br></pre></td></tr></table></figure><p>显示正在运行的进程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose top</span><br><span class="line">compose_service_a_1</span><br><span class="line">PID    USER   TIME   COMMAND</span><br><span class="line">----------------------------</span><br><span class="line">4060   root   0:00   top</span><br><span class="line"></span><br><span class="line">compose_service_b_1</span><br><span class="line">PID    USER   TIME   COMMAND</span><br><span class="line">----------------------------</span><br><span class="line">4115   root   0:00   top</span><br></pre></td></tr></table></figure><h3 id="docker-compose-up"><a href="#docker-compose-up" class="headerlink" title="docker-compose up"></a>docker-compose up</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: up [options] [--scale SERVICE=NUM...] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -d, --detach               Detached mode: Run containers <span class="keyword">in</span> the background,</span><br><span class="line">                               <span class="built_in">print</span> new container names. Incompatible with</span><br><span class="line">                               --abort-on-container-exit.</span><br><span class="line">    --no-color                 Produce monochrome output.</span><br><span class="line">    --quiet-pull               Pull without printing progress information</span><br><span class="line">    --no-deps                  Don<span class="string">'t start linked services.</span></span><br><span class="line"><span class="string">    --force-recreate           Recreate containers even if their configuration</span></span><br><span class="line"><span class="string">                               and image haven'</span>t changed.</span><br><span class="line">    --always-recreate-deps     Recreate dependent containers.</span><br><span class="line">                               Incompatible with --no-recreate.</span><br><span class="line">    --no-recreate              If containers already exist, don<span class="string">'t recreate</span></span><br><span class="line"><span class="string">                               them. Incompatible with --force-recreate and -V.</span></span><br><span class="line"><span class="string">    --no-build                 Don'</span>t build an image, even <span class="keyword">if</span> it<span class="string">'s missing.</span></span><br><span class="line"><span class="string">    --no-start                 Don'</span>t start the services after creating them.</span><br><span class="line">    --build                    Build images before starting containers.</span><br><span class="line">    --abort-on-container-exit  Stops all containers <span class="keyword">if</span> any container was</span><br><span class="line">                               stopped. Incompatible with -d.</span><br><span class="line">    -t, --timeout TIMEOUT      Use this timeout <span class="keyword">in</span> seconds <span class="keyword">for</span> container</span><br><span class="line">                               shutdown when attached or when containers are</span><br><span class="line">                               already running. (default: 10)</span><br><span class="line">    -V, --renew-anon-volumes   Recreate anonymous volumes instead of retrieving</span><br><span class="line">                               data from the previous containers.</span><br><span class="line">    --remove-orphans           Remove containers <span class="keyword">for</span> services not defined</span><br><span class="line">                               <span class="keyword">in</span> the Compose file.</span><br><span class="line">    --<span class="built_in">exit</span>-code-from SERVICE   Return the <span class="built_in">exit</span> code of the selected service</span><br><span class="line">                               container. Implies --abort-on-container-exit.</span><br><span class="line">    --scale SERVICE=NUM        Scale SERVICE to NUM instances. Overrides the</span><br><span class="line">                               `scale` setting <span class="keyword">in</span> the Compose file <span class="keyword">if</span> present.</span><br></pre></td></tr></table></figure><p>构建，创建，启动并且附属到service的容器</p><p>除非它们已经正在运行，此命令同样启动任何链接的service</p><p><code>docker-compose up</code> 命令聚集每个容器的日志输出。当命令退出，所有容器停止。可以执行 <code>docker-compose up -d</code> 在后台启动容器，并让它们运行</p><p>如果service中已存在容器，并且service的配置或者镜像在容器创建后更改，<code>docker-compose up</code> 通过停止并重新创建容器来接受更改。使用 <code>--no-recreate</code> 标志防止Compose接受更改</p><p>如果你想强制Compose停止并重新创建所有容器，可以使用 <code>--force-recreate</code> 标志</p><p>如果进程遇到错误，则命令的退出代码为 <code>1</code></p><p>如果进程通过使用 <code>SIGINT</code> (<code>ctrl</code> + <code>C</code>) 或者 <code>SIGTERM</code>，容器将被停止，并且退出代码为 <code>0</code></p><p>如果关闭阶段再次发送 <code>SIGINT</code> 或者 <code>SIGTERM</code> 信号，正在运行的容器会被杀死，并且退出代码为 <code>2</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;docker-compose-build&quot;&gt;&lt;a href=&quot;#docker-compose-build&quot; class=&quot;headerlink&quot; title=&quot;docker-compose build&quot;&gt;&lt;/a&gt;docker-compose build&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="docker compose" scheme="http://yoursite.com/categories/docker-compose/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker compose cli 环境变量</title>
    <link href="http://yoursite.com/2019/09/13/environmetns_variables_docker_compose/"/>
    <id>http://yoursite.com/2019/09/13/environmetns_variables_docker_compose/</id>
    <published>2019-09-13T19:00:00.000Z</published>
    <updated>2019-09-17T03:09:30.336Z</updated>
    
    <content type="html"><![CDATA[<p>有几个环境变量可供你配置Docker Compose命令行行为</p><p>以<code>DOCKR_</code>为前缀的变量与用于配置Docker 命令行客户端的变量相同，如果你使用<code>docker-machine</code>，<code>eval &quot;$(docker-machine env my-docker-vm)&quot;</code>命令能将它们设置为正确的值</p><blockquote><p>注意：一些变量也可以使用<code>environment file</code>(<a href="https://docs.docker.com/compose/env-file/)提供" target="_blank" rel="noopener">https://docs.docker.com/compose/env-file/)提供</a></p></blockquote><h2 id="COMPOSE-PROJECT-NAME"><a href="#COMPOSE-PROJECT-NAME" class="headerlink" title="COMPOSE_PROJECT_NAME"></a>COMPOSE_PROJECT_NAME</h2><p>用于配置项目名称，当启动时，这个值将与service名称一起添加到容器中。例如，你的项目名称为 <code>myapp</code> 并且包含两个services <code>db</code> 和 <code>web</code>，然后Compose分别启动名为 <code>myapp_db_1</code> 和 <code>myapp_web_1</code> 的容器</p><p>若不配置，<code>COMPOSE_PROJECT_NAME</code> 默认为项目目录的文件夹名。另请参见-p <code>command-line option</code>(<a href="https://docs.docker.com/compose/reference/overview/" target="_blank" rel="noopener">https://docs.docker.com/compose/reference/overview/</a>)</p><h2 id="COMPOSE-FILE"><a href="#COMPOSE-FILE" class="headerlink" title="COMPOSE_FILE"></a>COMPOSE_FILE</h2><p>指定Compose文件的路径，若不提供，Compose将在当前目录中寻找名为<code>docker-compose.yml</code>的文件。然后遍历每个父目录直到找到名为<code>docker-compose.yml</code>的文件</p><p>此变量支持由路径分隔符分隔的多个Compose文件（在Linux和macOS上，路径分隔符为：，在Windows上为;）。例如：<code>COMPOSE_FILE=docker-compose.yml:docker-compose.prod.yml</code>，也可以使用<code>COMPOSE_PATH_SEPARATOR</code>自定义路径分隔符。另请参见-f <code>command-line option</code></p><h2 id="COMPOSE-API-VERSION"><a href="#COMPOSE-API-VERSION" class="headerlink" title="COMPOSE_API_VERSION"></a>COMPOSE_API_VERSION</h2><p>Docker API仅支持来自报告特定版本的客户端的请求。如果你使用<code>docker-compose</code>时接收到<code>client and server don&#39;t have same version</code>的报错，你可以通过设置这个环境变量来解决此错误，设置版本值与服务器版本相匹配</p><p>设置此变量，旨在解决需要在客户端和服务器版本不匹配的情况下临时运行的情况。 例如，如果可以升级客户端的话，必须先升级服务器。</p><h2 id="DOCKER-HOST"><a href="#DOCKER-HOST" class="headerlink" title="DOCKER_HOST"></a>DOCKER_HOST</h2><p>设置<code>docker</code>守护进程的URL，和Docker客户端一样，默认为<code>unix:///var/run/docker.sock</code></p><h2 id="DOCKER-TLS-VERIFY"><a href="#DOCKER-TLS-VERIFY" class="headerlink" title="DOCKER_TLS_VERIFY"></a>DOCKER_TLS_VERIFY</h2><p>配置用于TLS验证的<code>ca.pem</code>,<code>cert.pem</code>,<code>key.pem</code>等文件的路径，默认为<code>~/.docker</code></p><h2 id="COMPOSE-HTTP-TIMEOUT"><a href="#COMPOSE-HTTP-TIMEOUT" class="headerlink" title="COMPOSE_HTTP_TIMEOUT"></a>COMPOSE_HTTP_TIMEOUT</h2><p>配置在Compose认为失败之前允许挂起对Docker守护程序的请求的时间（以秒为单位）。 默认为60秒</p><h2 id="COMPOSE-TLS-VERSION"><a href="#COMPOSE-TLS-VERSION" class="headerlink" title="COMPOSE_TLS_VERSION"></a>COMPOSE_TLS_VERSION</h2><p>配置TLS与<code>docker</code>守护进程通信所用的TLS版本，默认为<code>TLSv1</code>，支持的值包括：TLSv1，TLSv1_1，TLSv1_2</p><h2 id="COMPOSE-CONVERT-WINDOWS-PATHS"><a href="#COMPOSE-CONVERT-WINDOWS-PATHS" class="headerlink" title="COMPOSE_CONVERT_WINDOWS_PATHS"></a>COMPOSE_CONVERT_WINDOWS_PATHS</h2><p>在卷定义中启用从Windows样式到Unix样式的路径转换。 Windows上的Docker Machine和Docker Toolbox的用户应始终设置此项。 默认值为0.支持的值：true或1表示启用，false或0表示禁用</p><h2 id="COMPOSE-PATH-SEPARATOR"><a href="#COMPOSE-PATH-SEPARATOR" class="headerlink" title="COMPOSE_PATH_SEPARATOR"></a>COMPOSE_PATH_SEPARATOR</h2><p>如果设置，使用此字符做作为分隔符分隔<code>COMPOSE_FILE</code>环境变量的值</p><h2 id="COMPOSE-FORCE-WINDOWS-HOST"><a href="#COMPOSE-FORCE-WINDOWS-HOST" class="headerlink" title="COMPOSE_FORCE_WINDOWS_HOST"></a>COMPOSE_FORCE_WINDOWS_HOST</h2><p>如果设置，则解析使用短语法的卷声明，假设主机路径是Windows路径，即使Compose在基于UNIX的系统上运行也是如此。 支持的值：true或1表示启用，false或0表示禁用</p><h2 id="COMPOSE-IGNORE-ORPHANS"><a href="#COMPOSE-IGNORE-ORPHANS" class="headerlink" title="COMPOSE_IGNORE_ORPHANS"></a>COMPOSE_IGNORE_ORPHANS</h2><p>如果设置，Compose不会尝试检测项目的孤立容器。 支持的值：true或1表示启用，false或0表示禁用</p><h2 id="COMPOSE-PARALLEL-LIMIT"><a href="#COMPOSE-PARALLEL-LIMIT" class="headerlink" title="COMPOSE_PARALLEL_LIMIT"></a>COMPOSE_PARALLEL_LIMIT</h2><p>设置Compose可以并行执行的操作数限制。 默认值为64，不能设置为低于2</p><h2 id="COMPOSE-INTERACTIVE-NO-CLI"><a href="#COMPOSE-INTERACTIVE-NO-CLI" class="headerlink" title="COMPOSE_INTERACTIVE_NO_CLI"></a>COMPOSE_INTERACTIVE_NO_CLI</h2><p>如果设置，Compose不会尝试使用Docker CLI进行交互式运行和执行操作。 在上述操作需要CLI的Windows上，此选项不可用。 支持：true或1表示启用，false或0表示禁用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有几个环境变量可供你配置Docker Compose命令行行为&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;DOCKR_&lt;/code&gt;为前缀的变量与用于配置Docker 命令行客户端的变量相同，如果你使用&lt;code&gt;docker-machine&lt;/code&gt;，&lt;code&gt;eval &amp;quo
      
    
    </summary>
    
    
      <category term="docker compose" scheme="http://yoursite.com/categories/docker-compose/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker compose 使用</title>
    <link href="http://yoursite.com/2019/09/11/getting_start/"/>
    <id>http://yoursite.com/2019/09/11/getting_start/</id>
    <published>2019-09-11T19:00:00.000Z</published>
    <updated>2019-09-17T06:50:51.783Z</updated>
    
    <content type="html"><![CDATA[<p>通过Docker Compose构建一个简单的python应用程序，应用程序使用Flask framework以及redis来作点击计数器。虽然该示例使用Python，即使您不熟悉它，此处演示的概念也应该是可以理解的。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>确保已安装Docker Engine和Docker Compose，不需要安装python和redis，因为两者都由docker镜像提供</p><h2 id="步骤1-Setup"><a href="#步骤1-Setup" class="headerlink" title="步骤1: Setup"></a>步骤1: Setup</h2><p>定义应用依赖项</p><ol><li><p>创建项目目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir composetest</span><br><span class="line"><span class="built_in">cd</span> composetest</span><br></pre></td></tr></table></figure></li><li><p>在项目目录中创建名为<code>app.py</code>的文件，并复制以下内容：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hit_count</span><span class="params">()</span>:</span></span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">'hits'</span>)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! I have been seen &#123;&#125; times.\n'</span>.format(count)</span><br></pre></td></tr></table></figure></li></ol><p>在此示例中，<code>redis</code>是redis容器在应用网络中的主机名，我们使用默认的6379作为redis服务的端口</p><ol start="3"><li>另外在项目目录中创建名为<code>requirements.txt</code>的文件，并复制以下内容：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure></li></ol><h2 id="步骤2-创建Dockerfile"><a href="#步骤2-创建Dockerfile" class="headerlink" title="步骤2: 创建Dockerfile"></a>步骤2: 创建Dockerfile</h2><p>在此步骤，编辑一个用来构建Docker image的Dockerfile。此镜像包含python应用所需的所有依赖项以及python本身</p><p>在你的项目目录中，创建名为<code>Dockerfile</code>的文件，并复制以下内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="attr">python:3.7-alpine</span></span><br><span class="line"><span class="string">WORKDIR</span> <span class="string">/code</span></span><br><span class="line"><span class="string">ENV</span> <span class="string">FLASK_APP</span> <span class="string">app.py</span></span><br><span class="line"><span class="string">ENV</span> <span class="string">FLASK_RUN_HOST</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">apk</span> <span class="string">add</span> <span class="bullet">--no-cache</span> <span class="string">gcc</span> <span class="string">musl-dev</span> <span class="string">linux-headers</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">requirements.txt</span> <span class="string">requirements.txt</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">pip</span> <span class="string">install</span> <span class="bullet">-r</span> <span class="string">requirements.txt</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">.</span> <span class="string">.</span></span><br><span class="line"><span class="string">CMD</span> <span class="string">["flask",</span> <span class="string">"run"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>以此来告诉docker：</p><ul><li>构建以python3.7-alpine为基础镜像的镜像</li><li>设置工作目录为<code>/code</code></li><li>设置<code>flask</code>命令使用的环境变量</li><li>安装gcc以便MarkupSafe and SQLAlchemy这样的Python包可加速编译</li><li>拷贝 <code>requirements.txt</code>文件到容器，并安装Python依赖项</li><li>拷贝当前目录所有文件到镜像中的工作目录</li><li>设置容器的默认命令为<code>flask run</code></li></ul><p>获取编写Dockerfile的更多详情，请查阅<a href="https://docs.docker.com/engine/tutorials/dockerimages/#building-an-image-from-a-dockerfile" target="_blank" rel="noopener">Docker user guide</a>以及<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener"> Dockerfile reference</a></p><h2 id="步骤3-在Compose-file中定义services"><a href="#步骤3-在Compose-file中定义services" class="headerlink" title="步骤3: 在Compose file中定义services"></a>步骤3: 在Compose file中定义services</h2><p>在项目目录中创建名为<code>docker-compose.yml</code>的文件，并复制以下内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"5000:5000"</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">"redis:alpine"</span></span><br></pre></td></tr></table></figure><p>此Compose file定义了两个services：<code>web</code>和<code>redis</code></p><h3 id="Web-service"><a href="#Web-service" class="headerlink" title="Web service"></a>Web service</h3><p>此 <code>web</code> service使用从当前目录的Dockerfile构建而来的镜像，然后构建容器并暴露主机端口<code>5000</code>，此示例service使用默认的<code>5000</code>端口作为Flask Web Server的端口</p><h3 id="Redis-service"><a href="#Redis-service" class="headerlink" title="Redis service"></a>Redis service</h3><p>此 <code>redis</code> service使用从Docker Hub仓库拉取而来的公共<a href="https://registry.hub.docker.com/_/redis/" target="_blank" rel="noopener">Redis</a>镜像</p><h2 id="步骤4-使用Compose构建和运行应用程序"><a href="#步骤4-使用Compose构建和运行应用程序" class="headerlink" title="步骤4: 使用Compose构建和运行应用程序"></a>步骤4: 使用Compose构建和运行应用程序</h2><ol><li>在项目目录中，执行<code>docker-compose up</code>来启动应用程序<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up</span><br><span class="line">Creating network <span class="string">"composetest_default"</span> with the default driver</span><br><span class="line">Creating composetest_web_1 ...</span><br><span class="line">Creating composetest_redis_1 ...</span><br><span class="line">Creating composetest_web_1</span><br><span class="line">Creating composetest_redis_1 ... <span class="keyword">done</span></span><br><span class="line">Attaching to composetest_web_1, composetest_redis_1</span><br><span class="line">web_1    |  * Running on http://0.0.0.0:5000/ Press CTRL+C to quit</span><br><span class="line">redis_1  | 1:C 17 Aug 22:11:10.480 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">redis_1  | 1:C 17 Aug 22:11:10.480 <span class="comment"># Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=1, just started</span></span><br><span class="line">redis_1  | 1:C 17 Aug 22:11:10.480 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span></span><br><span class="line">web_1    |  * Restarting with <span class="built_in">stat</span></span><br><span class="line">redis_1  | 1:M 17 Aug 22:11:10.483 * Running mode=standalone, port=6379.</span><br><span class="line">redis_1  | 1:M 17 Aug 22:11:10.483 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">web_1    |  * Debugger is active!</span><br><span class="line">redis_1  | 1:M 17 Aug 22:11:10.483 <span class="comment"># Server initialized</span></span><br><span class="line">redis_1  | 1:M 17 Aug 22:11:10.483 <span class="comment"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></span><br><span class="line">web_1    |  * Debugger PIN: 330-787-903</span><br><span class="line">redis_1  | 1:M 17 Aug 22:11:10.483 * Ready to accept connections</span><br></pre></td></tr></table></figure></li></ol><p>Compose拉取Redis镜像，为你的代码构建镜像，并且启动你定义的services。在此，代码在构建时被静态复制到镜像</p><ol start="2"><li>在浏览器中访问<a href="http://localhost:5000/，查看正在运行的应用程序" target="_blank" rel="noopener">http://localhost:5000/，查看正在运行的应用程序</a></li></ol><p>如果您在Linux，Docker Desktop for Mac或Docker Desktop for Windows上本机使用Docker，那么Web应用程序现在应该在Docker守护程序主机上的端口5000上进行侦听。 将Web浏览器指向<a href="http://localhost:5000以查找`Hello" target="_blank" rel="noopener">http://localhost:5000以查找`Hello</a> World`消息。 如果不行，也可以尝试<a href="http://127.0.0.1:5000" target="_blank" rel="noopener">http://127.0.0.1:5000</a></p><p>如果您在Mac或Windows上使用Docker Machine，请使用<code>docker-machine ip MACHINE_VM</code>获取Docker主机的IP地址。 然后在浏览器中打开<code>http://MACHINE_VM_IP:5000</code></p><p>您可以在浏览器中看到一条消息：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Hello World! I have been seen 1 times.</span><br></pre></td></tr></table></figure><p><img src="./quick-hello-world-1.png" alt="avatar"></p><ol start="3"><li>刷新页面</li></ol><p>数字会增长</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Hello World! I have been seen 2 times.</span><br></pre></td></tr></table></figure><p><img src="./quick-hello-world-2.png" alt="avatar"></p><ol start="4"><li>切换到另一个终端窗口<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image ls</span><br><span class="line">REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">composetest_web         latest              e2c21aa48cc1        4 minutes ago       93.8MB</span><br><span class="line">python                  3.4-alpine          84e6077c7ab6        7 days ago          82.5MB</span><br><span class="line">redis                   alpine              9d8fa9aa0e5b        3 weeks ago         27.5MB</span><br></pre></td></tr></table></figure></li></ol><p>你可以用<code>docker inspect &lt;tag or id&gt;</code>查看镜像详情</p><ol start="5"><li>在第二个终端的项目目录中执行<code>docker-compose down</code>，或者在启动应用程序的终端中按<code>CTRL+C</code>来停止应用</li></ol><h2 id="步骤5：编辑Compose-file添加挂载"><a href="#步骤5：编辑Compose-file添加挂载" class="headerlink" title="步骤5：编辑Compose file添加挂载"></a>步骤5：编辑Compose file添加挂载</h2><p>在项目目录中编辑<code>docker-compose.yml</code>文件，为 <code>web</code> service添加一个本地挂载:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"5000:5000"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">.:/code</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      FLASK_ENV:</span> <span class="string">development</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">"redis:alpine"</span></span><br></pre></td></tr></table></figure><p>新的<code>volumes</code>键挂载宿主机中的项目目录(当前目录)到容器的<code>/code</code>目录，允许你动态修改代码，而无需重建映像。<code>environment</code>键设置<code>FLASK_ENV</code>的环境变量，它告诉flask运行在开发模式下运行并在更改时重新加载代码，这种模式仅应用于开发</p><h2 id="步骤6-使用compose重构并运行应用"><a href="#步骤6-使用compose重构并运行应用" class="headerlink" title="步骤6: 使用compose重构并运行应用"></a>步骤6: 使用compose重构并运行应用</h2><p>在你的项目目录， 使用已更新的Compose file，执行<code>docker-compose up</code>构建应用并运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up</span><br><span class="line">Creating network <span class="string">"composetest_default"</span> with the default driver</span><br><span class="line">Creating composetest_web_1 ...</span><br><span class="line">Creating composetest_redis_1 ...</span><br><span class="line">Creating composetest_web_1</span><br><span class="line">Creating composetest_redis_1 ... <span class="keyword">done</span></span><br><span class="line">Attaching to composetest_web_1, composetest_redis_1</span><br><span class="line">web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>再次在浏览器中查看<code>Hello World</code>，并刷新页面查看计数增量</p><h2 id="Step-7-应用更新"><a href="#Step-7-应用更新" class="headerlink" title="Step 7: 应用更新"></a>Step 7: 应用更新</h2><p>因为应用程序代码通过卷数据挂载在容器中，你可以更改代码并即时查看更改，而无需重构镜像</p><ol><li><p>修改<code>app.py</code>中的问候语并保存，例如，修改<code>Hello World!</code>为<code>Hello from Docker</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">return</span> <span class="string">'Hello from Docker! I have been seen &#123;&#125; times.\n'</span>.format(count)</span><br></pre></td></tr></table></figure></li><li><p>刷新浏览器，问候语已被更改，计数仍然在增长</p></li></ol><p><img src="./quick-hello-world-3.png" alt="avatar"></p><h2 id="Step-8-其他命令"><a href="#Step-8-其他命令" class="headerlink" title="Step 8: 其他命令"></a>Step 8: 其他命令</h2><p>如果你想在后台运行你的services，你可以将<code>-d</code>参数传递给<code>docker-compose up</code>，并使用<code>docker-compose ps</code> 查看当前正在运行的内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br><span class="line">Starting composetest_redis_1...</span><br><span class="line">Starting composetest_web_1...</span><br><span class="line"></span><br><span class="line">$ docker-compose ps</span><br><span class="line">Name                 Command            State       Ports</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">composetest_redis_1   /usr/<span class="built_in">local</span>/bin/run         Up</span><br><span class="line">composetest_web_1     /bin/sh -c python app.py   Up      5000-&gt;5000/tcp</span><br></pre></td></tr></table></figure><p><code>docker-compose run</code>命令允许你为services执行一次性命令，例如，查看<code>web</code> service可用的环境变量：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose run web env</span><br></pre></td></tr></table></figure><p>如果你通过<code>docker-compose up -d</code>启动了服务，完成之后请停止此服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose stop</span><br></pre></td></tr></table></figure><p>你可以通过<code>down</code>命令停止所有服务，并完全性删除容器，也可以通过<code>--volumes</code>删除Redis容器使用的数据卷</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose down --volumes</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过Docker Compose构建一个简单的python应用程序，应用程序使用Flask framework以及redis来作点击计数器。虽然该示例使用Python，即使您不熟悉它，此处演示的概念也应该是可以理解的。&lt;/p&gt;
&lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="docker compose" scheme="http://yoursite.com/categories/docker-compose/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker compose 安装</title>
    <link href="http://yoursite.com/2019/09/10/install/"/>
    <id>http://yoursite.com/2019/09/10/install/</id>
    <published>2019-09-10T19:00:00.000Z</published>
    <updated>2019-09-10T11:51:54.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>Docker Compose依靠Docker Engine进行任何有意义的工作，所以请确保已在本地或远程安装Docker Engine，具体情况取决于你的配置</p><ul><li>在Mac和Windows的Docker Desktop这样的桌面系统，Docker Compose包含在桌面安装的一部分中</li><li>在Linux系统中，首先安装Docker，然后安装Docker Compose</li><li>以非root用户运行Compose，详情请查阅<a href="https://docs.docker.com/install/linux/linux-postinstall/" target="_blank" rel="noopener">Manage Docker as a non-root user</a></li></ul><h2 id="安装Compose"><a href="#安装Compose" class="headerlink" title="安装Compose"></a>安装Compose</h2><p>请按照以下操作说明在Mac，Windows，Windows Server 2016，Linux系统中安装Compose，找出有关使用pip Python包管理器或安装Compose作为容器的替代方法</p><blockquote><ul><li><input checked disabled type="checkbox"> 安装不同版本</li></ul><p>以下是当前稳定版本（v1.24.1）的Compose安装说明。安装Compose不同版本，用你想要的版本替换给定的版本，Compose版本已在<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener"> Compose repository release page on GitHub</a>列出并可直接下载.要安装Compose的预发行版，请参阅<a href="https://docs.docker.com/compose/install/#install-pre-release-builds" target="_blank" rel="noopener"> install pre-release builds</a>部分</p></blockquote><h3 id="Linux中安装Compose"><a href="#Linux中安装Compose" class="headerlink" title="Linux中安装Compose"></a>Linux中安装Compose</h3><p>在Linux中，你可以从<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">Compose repository release page on GitHub</a>下载Docker Compose二进制文件。按照链接中的说明，在终端中执行<code>curl</code>命令去下载二进制文件。</p><ol><li>执行以下命令下载Docker Compose当前稳定版本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>安装Compose不同版本，请将1.24.1替换为您要使用的Compose版本</p></blockquote><ol start="2"><li>赋予二进制程序可执行权限<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;&lt;p&gt;Docker Compose依靠Docker Engine进行任何有意义的工作，所以请确保已在本地或远程安装Docker E
      
    
    </summary>
    
    
      <category term="docker compose" scheme="http://yoursite.com/categories/docker-compose/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker compose 概述</title>
    <link href="http://yoursite.com/2019/09/09/overview/"/>
    <id>http://yoursite.com/2019/09/09/overview/</id>
    <published>2019-09-09T19:00:00.000Z</published>
    <updated>2019-09-08T17:54:18.109Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>查找Compose文件参考？<a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">最新版本</a></p></blockquote><p>Compose是定义和运行docker多容器的工具。通过compose，使用Yaml文件配置你的应用服务。然后通过配置文件，只需一条命令，创建以及启动所有服务。学习更多Compose的功能，见<a href="https://docs.docker.com/compose/#features" target="_blank" rel="noopener">功能列表</a></p><p>Compose与CI workflows一样，工作在所有环境：生产，构建，开发，测试。在<a href="https://docs.docker.com/compose/#common-use-cases" target="_blank" rel="noopener">常用案例</a>中学习更多</p><p>Compose使用的基本三步骤：</p><ol><li>通过Dockerfile定义应用环境，以便可以在任何环境部署</li><li>在docker-compose.yml中定义能启动应用程序的services，以便它们能在一个隔离的环境中一起运行</li><li>执行 docker-compose up ，Compose启动并运行整个应用程序</li></ol><p>docker-compose.yml如下所示：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"5000:5000"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">.:/code</span></span><br><span class="line"><span class="attr">    - logvolume01:</span><span class="string">/var/log</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  logvolume01:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>更多Compose文件信息，见<a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">Compose file参考</a></p><p>Compose具有管理应用程序整个生命周期的命令：</p><ul><li>启动，停止，重建services</li><li>查看运行中的services状态</li><li>流式处理运行中的services日志输出</li><li>在service中执行一次性命令</li></ul><h2 id="Compose文档"><a href="#Compose文档" class="headerlink" title="Compose文档"></a>Compose文档</h2><ul><li><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Compose安装</a></li><li><a href="https://docs.docker.com/compose/gettingstarted/" target="_blank" rel="noopener">启动</a></li><li><a href="https://docs.docker.com/compose/django/" target="_blank" rel="noopener">从Django开始</a></li><li><a href="https://docs.docker.com/compose/rails/" target="_blank" rel="noopener">从Rails开始</a></li><li><a href="https://docs.docker.com/compose/wordpress/" target="_blank" rel="noopener">从Wordpress开始</a></li><li><a href="https://docs.docker.com/compose/faq/" target="_blank" rel="noopener">常见问题</a></li><li><a href="https://docs.docker.com/compose/reference/" target="_blank" rel="noopener">命令行参考</a></li><li><a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">Compose文件参考</a></li></ul><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>Compose的有效功能：</p><ul><li><a href="https://docs.docker.com/compose/overview/#Multiple-isolated-environments-on-a-single-host" target="_blank" rel="noopener">单个主机的多个隔离环境</a></li><li><a href="https://docs.docker.com/compose/overview/#preserve-volume-data-when-containers-are-created" target="_blank" rel="noopener">容器创建时保留卷数据</a></li><li><a href="https://docs.docker.com/compose/overview/#only-recreate-containers-that-have-changed" target="_blank" rel="noopener">仅重新创建已更改的容器</a></li><li><a href="https://docs.docker.com/compose/overview/#variables-and-moving-a-composition-between-environments" target="_blank" rel="noopener">不同变量定义不同环境</a></li></ul><h3 id="单个主机的多个隔离环境"><a href="#单个主机的多个隔离环境" class="headerlink" title="单个主机的多个隔离环境"></a>单个主机的多个隔离环境</h3><p>Compose使用项目名将环境彼此隔离，你在几个不同的上下文中使用此项目名：</p><ul><li>在开发主机上，创建单个环境的多个副本，例如当你要运行项目每个功能分支的稳定版本时</li><li>在CI服务器上，为了防止构建时相互干扰，可以将项目名称设置为唯一的构建号</li><li>在共享主机或开发主机上，防止可能使用了相同服务名称的不同项目相互干扰</li></ul><p>默认的项目名称是项目目录的名称，你可以通过使用 -p 命令参数 或者  <a href="https://docs.docker.com/compose/reference/envvars/#compose-project-name" target="_blank" rel="noopener"><code>COMPOSE_PROJECT_NAME</code> environment variable</a> 自定义项目名称</p><h3 id="容器创建时保留卷数据"><a href="#容器创建时保留卷数据" class="headerlink" title="容器创建时保留卷数据"></a>容器创建时保留卷数据</h3><p>Compose保留你的service使用的所有数据卷，当docker-compose up执行，如果它找到以前运行的任何容器，它会将卷从旧容器复制到新容器。此过程可确保你在卷中创建的任何数据都不会丢失</p><p>如果你在Windows系统的机器中使用docker-compose，请查阅<a href="https://docs.docker.com/compose/reference/envvars/" target="_blank" rel="noopener">环境变量</a>并根据你指定的需求调整必要的环境变量</p><h3 id="仅重新创建已更改的容器"><a href="#仅重新创建已更改的容器" class="headerlink" title="仅重新创建已更改的容器"></a>仅重新创建已更改的容器</h3><p>Compose缓存用于创建容器的配置，当你重启一个未更改的service时，Compose将重新使用现有容器，重用容器意味着你可以非常快速地更改环境</p><h3 id="不同变量定义不同环境"><a href="#不同变量定义不同环境" class="headerlink" title="不同变量定义不同环境"></a>不同变量定义不同环境</h3><p>Compose支持Compose文件中的变量，你可以使用这些变量为不同环境或者用户自定义组合。有关详细信息，请查阅<a href="https://docs.docker.com/compose/compose-file/#variable-substitution" target="_blank" rel="noopener">变量替换</a><br>你可以使用 <code>extends</code> 字段拓展Compose文件，也可以通过创建多个Compose文件。有关详细信息，请查阅<code>extends</code>(<a href="https://docs.docker.com/compose/extends/" target="_blank" rel="noopener">https://docs.docker.com/compose/extends/</a>)</p><h2 id="常用案例"><a href="#常用案例" class="headerlink" title="常用案例"></a>常用案例</h2><p>Compose 能在不同方式中使用，一些常用案例如下所示：</p><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>当你在开发软件时，在隔离的环境中运行应用程序并与之交互的能力至关重要，Compose命令行工具可以用来创建此环境并与之交互</p><p><a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">Compose file</a>提供了一种记录并配置所有应用程序的服务依赖项(数据库，队列，缓存，Web服务API等)的方法。通过Compose命令行工具，使用单个命令<code>docker-compose up</code>,你可以为每个依赖项创建并启动一个或多个容器</p><p>总之，这些特性为开发者提供了一个启动项目的便捷方式。Compose可以将一个多页面“开发者入门指南”简化为一个机器可读的compose文件和一些命令</p><h3 id="自动化测试环境"><a href="#自动化测试环境" class="headerlink" title="自动化测试环境"></a>自动化测试环境</h3><p>自动化测试套件是任何持续化部署或者持续化交互进程最重要的一部分，自动化端到端测试需要运行测试的环境，Compose为你的测试套件提供了创建和销毁隔离的测试环境的一种简便方法。通过在Compose file中定义完整环境，你仅仅只需要通过几个命令来创建和销毁这些环境：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建环境</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">./run_tests</span><br><span class="line"><span class="comment"># 销毁环境</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><h3 id="单主机部署"><a href="#单主机部署" class="headerlink" title="单主机部署"></a>单主机部署</h3><p>Compose的传统就是专注于开发和测试工作流程，但是每个版本我们都致力于面向于生产环境功能取得进展。你可以使用Compose向远程Docker Engine部署，此Docker Engine可以是配置了<a href="https://docs.docker.com/machine/overview/" target="_blank" rel="noopener">Docker Machine</a>的单实例，也可以是整个<a href="https://docs.docker.com/engine/swarm/" target="_blank" rel="noopener">Docker Swarm</a>集群</p><p>面向生产环境功能的更多详情，请查阅<a href="https://docs.docker.com/compose/production/" target="_blank" rel="noopener">compose in production</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;查找Compose文件参考？&lt;a href=&quot;https://docs.docker.com/compose/compose-file/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;最新版本&lt;/a&gt;&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
    
      <category term="docker compose" scheme="http://yoursite.com/categories/docker-compose/"/>
    
    
  </entry>
  
</feed>
